/* Exploratory Data Analysis in SQL
Skills used: joins, Common Table Expressions (CTEs), casting, case statements, summarizing and aggregating numeric data, 
correlation, truncating, and working with dates, times, and strings. */

CREATE TABLE info
(product_name VARCHAR(100),
    product_id VARCHAR(11) PRIMARY KEY,
    description VARCHAR(700));

CREATE TABLE finance
(product_id VARCHAR(11) PRIMARY KEY,
    listing_price FLOAT,
    sale_price FLOAT,
    discount FLOAT,
    revenue FLOAT);

CREATE TABLE reviews
(product_id VARCHAR(11) PRIMARY KEY,
    rating FLOAT,
    reviews FLOAT);

CREATE TABLE traffic
(product_id VARCHAR(11) PRIMARY KEY,
    last_visited TIMESTAMP);

CREATE TABLE brands
(product_id VARCHAR(11) PRIMARY KEY,
    brand VARCHAR(7));

\copy info FROM 'info_v2.csv' DELIMITER ',' CSV HEADER;
\copy finance FROM 'finance.csv' DELIMITER ',' CSV HEADER;
\copy reviews FROM 'reviews_v2.csv' DELIMITER ',' CSV HEADER;
\copy traffic FROM 'traffic_v3.csv' DELIMITER ',' CSV HEADER;
\copy brands FROM 'brands_v2.csv' DELIMITER ',' CSV HEADER;

/* The database, sports, contains 5 tables with product_id being the primary key for all of them. 
The company is interested in how it can improve revenue. */

/* ---Counting missing values: number of non-missing entries for description, listing_price, and last_visited--- */

SELECT COUNT(*) AS total_rows, 
    COUNT(i.description) AS count_description, 
    COUNT(f.listing_price) AS count_listing_price, 
    COUNT(t.last_visited) AS count_last_visited 
FROM info AS i
INNER JOIN finance AS f
    ON i.product_id = f.product_id
INNER JOIN traffic AS t
    ON t.product_id = f.product_id;

/* Nike vs. Adidas listing_price */

/*---select brand, listing_price as int, and count all products in finance, join brands on finance on product_id, filter for products with listing_price more than 0
sort by listing_price in DESC, aggregrate results by brand and listing_price--- */

SELECT b.brand, f.listing_price::integer, COUNT(f.*)
FROM finance AS f
INNER JOIN brands AS b 
    ON f.product_id = b.product_id
WHERE listing_price > 0
GROUP BY b.brand, f.listing_price
ORDER BY listing_price DESC;

/* Labeling price ranges 
-- Select the brand, a count of all products in the finance table, and total revenue
-- Create four labels for products based on their price range, aliasing as price_category
-- Join brands to finance on product_id and filter out products missing a value for brand
-- Group results by brand and price_category, sort by total_revenue */

SELECT b.brand, COUNT(f.*), SUM(f.revenue) as total_revenue,
CASE WHEN f.listing_price < 42 THEN 'Budget'
    WHEN f.listing_price >= 42 AND f.listing_price < 74 THEN 'Average'
    WHEN f.listing_price >= 74 AND f.listing_price < 129 THEN 'Expensive'
    ELSE 'Elite' END AS price_category
FROM finance AS f
INNER JOIN brands AS b 
    ON f.product_id = b.product_id
having b.brand IS NOT NULL
GROUP BY b.brand, price_category
ORDER BY total_revenue DESC;

/* From previous querry Adidas items generate more revenue regardless of price category. Now, I want to know whether there is a difference in the amount of discount offered between brands,
as this could be influencing revenue.
---Average discount by brand---
-Calculate the average discount offered by brand
-Join brands to finance on product_id
-Aggregate by brand
-Filter for products without missing values for brand */

SELECT b.brand, AVG(f.discount) * 100 AS average_discount
FROM brands AS b
INNER JOIN finance AS f 
    ON b.product_id = f.product_id
GROUP BY b.brand
HAVING b.brand IS NOT NULL
ORDER BY average_discount;

/* Correlation between revenue and reviews */
SELECT corr(r.reviews, f.revenue) AS review_revenue_corr
FROM reviews AS r
INNER JOIN finance AS f 
    ON r.product_id = f.product_id;
/* --there was strong correlation between reviews and revenue, 0.6518512283481301. This means more reviews, more revenue.-- */

/* Maybe the length of a product's description might influence a product's rating and reviews 
â€” if so, the company can produce content guidelines for listing products on their website and test if this influences revenue.
-- Calculate description_length
-- Convert rating to a numeric data type and calculate average_rating */

SELECT TRUNC(LENGTH(i.description), -2) AS description_length,
    ROUND(AVG(r.rating::numeric), 2) AS average_rating
FROM info AS i
INNER JOIN reviews AS r 
    ON i.product_id = r.product_id
WHERE i.description IS NOT NULL
GROUP BY description_length
ORDER BY description_length;

/* Reviews by month and brand. Exploring volume of reviews by month to see if there are any trends or gaps to look at
-- Select brand, month from last_visited, and a count of all products in reviews aliased as num_reviews
-- Join traffic with reviews and brands on product_id
-- Group by brand and month, filtering out missing values for brand and month */ 

SELECT b.brand, extract('month', t.last_visited) AS month, COUNT(r.*) AS num_reviews
FROM brands AS b
INNER JOIN traffic AS t 
    ON b.product_id = t.product_id
INNER JOIN reviews AS r 
    ON t.product_id = r.product_id
GROUP BY b.brand, month
HAVING b.brand IS NOT NULL
    AND extract('month', t.last_visited) IS NOT NULL
ORDER BY b.brand, month;

/* Footwear product performance: creating a CTE that filters description for keywords, 
then using the results to find out how much of the company's stock consists of footwear products and the median revenue generated by these items.
-footwear CTE, containing description and revenue
-Filter footwear for products with a description containing %shoe%, %trainer, or %foot% */

WITH footwear AS
(SELECT i.description, f.revenue
    FROM info AS i
    INNER JOIN finance AS f 
        ON i.product_id = f.product_id
    WHERE i.description ILIKE '%shoe%'
        OR i.description ILIKE '%trainer%'
        OR i.description ILIKE '%foot%'
        AND i.description IS NOT NULL)

SELECT COUNT(*) AS num_footwear_products, 
    percentile_disc(0.5) WITHIN GROUP (ORDER BY revenue) AS median_footwear_revenue
FROM footwear;

/* Exploring how footwear's median revenue differs from clothing products
-- Calculating the number of products in info and median revenue from finance
-- Inner join info with finance on product_id
-- Filter the selection for products with a description not in footwear */

WITH footwear AS
(SELECT i.description, f.revenue
    FROM info AS i
    INNER JOIN finance AS f 
        ON i.product_id = f.product_id
    WHERE i.description ILIKE '%shoe%'
        OR i.description ILIKE '%trainer%'
        OR i.description ILIKE '%foot%'
        AND i.description IS NOT NULL)
SELECT COUNT(i.*) AS num_clothing_products, 
    percentile_disc(0.5) WITHIN GROUP (ORDER BY f.revenue) AS median_clothing_revenue
FROM info AS i
INNER JOIN finance AS f on i.product_id = f.product_id
WHERE i.description NOT IN (SELECT description FROM footwear);
